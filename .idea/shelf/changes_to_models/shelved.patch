Index: server/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express, { Express } from \"express\";\nimport listEndpoints from \"express-list-endpoints\";\nimport cors from \"cors\";\nimport { testDbConnection } from \"./configs/database\";\n\nconst app: Express = express();\nconst port = process.env.PORT;\n\napp.use(cors());\n\napp.use(express.json());\n\napp.get('/', function(req, res){\n    res.send(\"We are online!\");\n})\n\n// app.use(\"/api/\", userRoutes)\n\nconsole.table(listEndpoints(app));\n\napp.listen(port, () => {\n    console.log(`[server]: Server is running at http://localhost:${port}`);\n    testDbConnection();\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/index.ts b/server/index.ts
--- a/server/index.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/index.ts	(date 1717203411164)
@@ -16,6 +16,7 @@
 
 // app.use("/api/", userRoutes)
 
+
 console.table(listEndpoints(app));
 
 app.listen(port, () => {
Index: server/controllers/authController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/authController.ts b/server/controllers/logoutController.ts
rename from server/controllers/authController.ts
rename to server/controllers/logoutController.ts
--- a/server/controllers/authController.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/controllers/logoutController.ts	(date 1717203276901)
@@ -1,0 +1,30 @@
+import {User} from "../models/user";
+
+export const handleLogout = async (req, res) => {
+    // On client, delete accessToken
+    const cookies = req.cookies;
+    if (!cookies?.jwt)
+        return res.sendStatus(204);
+
+    const refreshToken = cookies.jwt;
+
+    // Is refreshToken in DB?
+    const foundUser = await User.findOne(
+        ({
+            where: {
+                refreshToken: refreshToken
+            }
+        })
+    );
+
+    if (!foundUser) {
+        res.clearCookie('jwt', {httpOnly: true});
+        return res.sendStatus(204)
+    }
+
+    // Delete refresh token in db.
+    foundUser.refreshToken = '';
+
+    res.clearCookie('jwt', { httpOnly: true, sameSite: 'none', secure: true }); // secure: true
+    res.sendStatus(204);
+}
\ No newline at end of file
Index: server/models/Priority.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { AutoIncrement, Column, DataType, Model, NotNull, PrimaryKey, Table } from \"sequelize-typescript\";\n\n@Table\nexport class Priority extends Model<Priority>{\n    @PrimaryKey\n    @AutoIncrement\n    @Column({\n        type: DataType.INTEGER,\n        allowNull: false\n    })\n    id!: number;\n\n    @Column({\n        type: DataType.STRING,\n        allowNull: false\n    })\n    name!: string;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/models/Priority.ts b/server/models/Priority.ts
--- a/server/models/Priority.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/models/Priority.ts	(date 1717203324154)
@@ -1,7 +1,7 @@
 import { AutoIncrement, Column, DataType, Model, NotNull, PrimaryKey, Table } from "sequelize-typescript";
 
 @Table
-export class Priority extends Model<Priority>{
+export class Priority extends Model {
     @PrimaryKey
     @AutoIncrement
     @Column({
Index: server/controllers/loginController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/loginController.ts b/server/controllers/loginController.ts
new file mode 100644
--- /dev/null	(date 1717199690899)
+++ b/server/controllers/loginController.ts	(date 1717199690899)
@@ -0,0 +1,59 @@
+import {User} from "../models/User";
+import bcrypt from 'bcrypt';
+import jwt from 'jsonwebtoken';
+
+export const handleLogin = async (req, res) => {
+    const { email, password } = req.body;
+
+    if(!email || !password)
+        return res
+            .status(400)
+            .json({
+                status: res.statusCode,
+                message: 'Email and Password required'
+            })
+
+    const foundUser = await User.findOne(
+        ({
+            where: {
+                email: email
+            }
+        })
+    );
+
+    if(!foundUser)
+        return res.sendStatus(401);
+
+    const match = bcrypt.compare(password, foundUser.passHash);
+
+    if(match) {
+        const roles = Object.values(foundUser.role);
+
+        const accessToken = jwt.sign(
+            { 'UserInfo':
+                {
+                    'email': foundUser.email,
+                    'roles': roles
+                }
+            },
+            process.env.ACCESS_TOKEN_SECRET,
+            { expiresIn: '15 * 60 * 60'}
+        );
+
+        const refreshToken = jwt.sign(
+            { 'email': foundUser.email },
+            process.env.REFRESH_TOKEN_SECRET,
+            { expiresIn: '1d' }
+        );
+
+        foundUser.refreshToken = refreshToken;
+        foundUser.save();
+
+        res.cookie('jwt', refreshToken, { httpOnly: true, sameSite: 'none', secure: true, maxAge: 24 * 60 * 60 * 1000});
+        res.json({
+            accessToken: accessToken
+        });
+    } else {
+        res.sendStatus(401);
+    }
+}
\ No newline at end of file
Index: server/models/Status.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { AutoIncrement, Column, DataType, Model, NotNull, PrimaryKey, Table } from \"sequelize-typescript\";\n\n@Table\nexport class Status extends Model<Status>{\n    @PrimaryKey\n    @AutoIncrement\n    @Column({\n        type: DataType.INTEGER,\n        allowNull: false\n    })\n    id!: number;\n\n    @Column({\n        type: DataType.STRING,\n        allowNull: false\n    })\n    name!: string;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/models/Status.ts b/server/models/Status.ts
--- a/server/models/Status.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/models/Status.ts	(date 1717203324158)
@@ -1,7 +1,7 @@
 import { AutoIncrement, Column, DataType, Model, NotNull, PrimaryKey, Table } from "sequelize-typescript";
 
 @Table
-export class Status extends Model<Status>{
+export class Status extends Model {
     @PrimaryKey
     @AutoIncrement
     @Column({
Index: server/controllers/refreshTokenController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/refreshTokenController.ts b/server/controllers/refreshTokenController.ts
new file mode 100644
--- /dev/null	(date 1717200793312)
+++ b/server/controllers/refreshTokenController.ts	(date 1717200793312)
@@ -0,0 +1,50 @@
+import {User} from "../models/user";
+import jwt from 'jsonwebtoken';
+export const handleRefreshToken = async (req, res) => {
+    const cookies = req.cookies;
+
+    if(!cookies?.jwt)
+        return res.status(401)
+            .json({
+                status: res.statusCode,
+                message: 'Unauthorized'
+            });
+
+    const refreshToken = cookies.jwt;
+
+    const foundUser = await User.findOne(
+        ({
+            where: {
+                refreshToken: refreshToken
+            }
+        })
+    );
+
+    if(!foundUser)
+        return res.sendStatus(401);
+
+    jwt.verify(
+        refreshToken,
+        process.env.REFRESH_TOKEN_SECRET,
+        (err, decoded) => {
+            if(err || foundUser.email !== decoded.email)
+                return res.sendStatus(403);
+
+            const roles = Object.values(foundUser.role);
+            const accessToken = jwt.sign(
+                { 'UserInfo':
+                    {
+                        'email': decoded.email,
+                        'roles': roles
+                    }
+                },
+                process.env.ACCESS_TOKEN_SECRET,
+                { expiresIn: '30s' }
+            );
+
+            res.json(
+                { accessToken }
+            );
+        }
+    )
+}
\ No newline at end of file
Index: server/models/user.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Table, Column, DataType, ForeignKey } from 'sequelize-typescript';\nimport { Department } from './Department'; // Ensure you have a Department model defined\nimport { BaseModel } from './BaseModel';\n\n@Table\nexport class User extends BaseModel<User> {\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  email!: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  passHash!: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  fullName!: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  role!: string;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: false,\n  })\n  dateOfBirth!: Date;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n    unique: true,\n  })\n  personalId!: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  address!: string;\n\n  @ForeignKey(() => Department)\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n  })\n  departmentId!: number;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/models/user.ts b/server/models/user.ts
--- a/server/models/user.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/models/user.ts	(date 1717203276896)
@@ -3,7 +3,7 @@
 import { BaseModel } from './BaseModel';
 
 @Table
-export class User extends BaseModel<User> {
+export class User extends BaseModel {
 
   @Column({
     type: DataType.STRING,
@@ -32,7 +32,7 @@
 
   @Column({
     type: DataType.DATE,
-    allowNull: false,
+    allowNull: true,
   })
   dateOfBirth!: Date;
 
@@ -55,4 +55,10 @@
     allowNull: false,
   })
   departmentId!: number;
+
+  @Column({
+    type: DataType. STRING,
+    allowNull: true
+  })
+  refreshToken!: string;
 }
\ No newline at end of file
Index: server/models/Department.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Column, DataType, NotNull, Table } from \"sequelize-typescript\";\nimport { BaseModel } from \"./BaseModel\";\n\n@Table\nexport class Department extends BaseModel<Department> {\n\n    @Column({\n        type: DataType.STRING,\n        allowNull: false\n    })\n    name!: string;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/models/Department.ts b/server/models/Department.ts
--- a/server/models/Department.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/models/Department.ts	(date 1717203324162)
@@ -2,7 +2,7 @@
 import { BaseModel } from "./BaseModel";
 
 @Table
-export class Department extends BaseModel<Department> {
+export class Department extends BaseModel {
 
     @Column({
         type: DataType.STRING,
Index: server/controllers/registrationController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/registrationController.ts b/server/controllers/registrationController.ts
new file mode 100644
--- /dev/null	(date 1717203276893)
+++ b/server/controllers/registrationController.ts	(date 1717203276893)
@@ -0,0 +1,54 @@
+import bcrypt from 'bcrypt';
+import {User} from "../models/user";
+
+interface RegistrationRequest {
+    email,
+    password,
+    fullName,
+    role,
+    dateOfBirth,
+    personalId,
+    address,
+    departmentId
+}
+
+export const handleRegistration = async (req, res) => {
+    const registrationRequest: RegistrationRequest = req.body;
+    if (!registrationRequest.email || !registrationRequest.password)
+        return res
+            .status(400)
+            .json({ 'message': 'Username and password are required.' });
+    // check for duplicate usernames in the db
+    const duplicate = await User.findOne(
+        ({
+            where: {
+                email: registrationRequest.email
+            }
+        })
+    );
+    if (duplicate)
+        return res
+            .status(409)
+            .json({
+                status: res.status,
+                message: 'User already exists'
+            });
+    try {
+        const hashedPwd = await bcrypt.hash(registrationRequest.password, 10);
+
+        const newUser = {
+            email: registrationRequest.email,
+            passHash: hashedPwd,
+            fullName: registrationRequest.fullName,
+            role: registrationRequest.role,
+            address: registrationRequest.address,
+            personalId: registrationRequest.personalId,
+            departmentId: registrationRequest.departmentId,
+            dateOfBirth: registrationRequest.dateOfBirth
+        };
+        const user = await User.create(newUser);
+        res.status(201).json({ 'success': `New user ${user} created!` });
+    } catch (err) {
+        res.status(500).json({ 'message': err });
+    }
+}
\ No newline at end of file
Index: server/models/Task.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Column, DataType, ForeignKey, Table } from \"sequelize-typescript\";\nimport { BaseModel } from \"./BaseModel\";\nimport { Status } from \"./Status\";\nimport { Project } from \"./Project\";\nimport { Priority } from \"./Priority\";\nimport { Department } from \"./Department\";\n\n@Table\nexport class Task extends BaseModel<Task> {\n\n    @ForeignKey(() => Project)\n    @Column({\n        type: DataType.INTEGER,\n        allowNull: false\n    })\n    projectId!: number;\n\n    @Column({\n        type: DataType.STRING,\n        allowNull: false\n    })\n    title!: string;\n\n    @Column({\n        type: DataType.STRING,\n        allowNull: false\n    })\n    description!: string;\n\n    @ForeignKey(() => Status)\n    @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n    })\n    statusId!: number;\n\n    @ForeignKey(() => Priority)\n    @Column({\n        type: DataType.INTEGER,\n        allowNull: false,\n    })\n    priorityId!: number;\n\n    @ForeignKey(() => Department)\n    @Column({\n        type: DataType.INTEGER,\n        allowNull: false\n    })\n    departmentId!: number;\n\n    @ForeignKey(() => Task)\n    @Column({\n        type: DataType.INTEGER\n    })\n    parentId!: number;\n\n    @Column({\n        type: DataType.DATE,\n    })\n    deadline!: Date;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/models/Task.ts b/server/models/Task.ts
--- a/server/models/Task.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/models/Task.ts	(date 1717203324150)
@@ -6,7 +6,7 @@
 import { Department } from "./Department";
 
 @Table
-export class Task extends BaseModel<Task> {
+export class Task extends BaseModel {
 
     @ForeignKey(() => Project)
     @Column({
Index: server/middleware/verifyJWT.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/middleware/verifyJWT.ts b/server/middleware/verifyJWT.ts
--- a/server/middleware/verifyJWT.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/middleware/verifyJWT.ts	(date 1717203507117)
@@ -1,0 +1,21 @@
+import jwt from 'jsonwebtoken';
+
+export const verifyJWT = (req, res, next) => {
+    const authHeader = req.headers.authorization || req.headers.Authorization;
+    if(!authHeader?.startsWith('Bearer '))
+        return res.sendStatus(401);
+
+    const token = authHeader.split(' ')[1];
+
+    jwt.verify(
+        token,
+        process.env.ACCESS_TOKEN_SECRET,
+        (err, decoded) => {
+            if (err)
+                return res.sendStatus(403);
+            req.email = decoded.UserInfo.email;
+            req.roles = decoded.UserInfo.roles
+            next();
+        }
+    );
+}
\ No newline at end of file
Index: server/models/BaseModel.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Model, Column, DataType, CreatedAt, UpdatedAt, PrimaryKey, AutoIncrement } from \"sequelize-typescript\";\n\nexport class BaseModel<T extends {}> extends Model<T> {\n    @PrimaryKey\n    @AutoIncrement\n    @Column({\n        type: DataType.INTEGER,\n    })\n    id!: number;\n\n    @CreatedAt\n    @Column({\n        type: DataType.DATE,\n    })\n    createdAt!: Date;\n\n    @UpdatedAt\n    @Column({\n        type: DataType.DATE,\n    })\n    updatedAt!: Date;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/models/BaseModel.ts b/server/models/BaseModel.ts
--- a/server/models/BaseModel.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/models/BaseModel.ts	(date 1717201228498)
@@ -1,6 +1,6 @@
 import { Model, Column, DataType, CreatedAt, UpdatedAt, PrimaryKey, AutoIncrement } from "sequelize-typescript";
 
-export class BaseModel<T extends {}> extends Model<T> {
+export class BaseModel extends Model {
     @PrimaryKey
     @AutoIncrement
     @Column({
Index: server/models/Project.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { AllowNull, Column, DataType, ForeignKey, Table } from \"sequelize-typescript\";\nimport { BaseModel } from \"./BaseModel\";\nimport { User } from \"./User\";\nimport { Status } from \"./Status\";\n\n@Table\nexport class Project extends BaseModel<Project> {\n    \n    @Column({\n        type: DataType.STRING,\n        allowNull: false\n    })\n    title!: string;\n\n    @Column({\n        type: DataType.STRING,\n    })\n    description!: string;\n\n    @ForeignKey(() => User)\n    @Column({\n        type: DataType.INTEGER,\n    })\n    clientId!: number;\n\n    @ForeignKey(() => Status)\n    @Column({\n        type: DataType.INTEGER,\n        allowNull: false\n    })\n    statusId!: number;\n\n    @Column({\n        type: DataType.DATE,\n    })\n    deadline!: Date;\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/models/Project.ts b/server/models/Project.ts
--- a/server/models/Project.ts	(revision 7b1d9e0e932a3a8029e6e0635ec76e686f7948e9)
+++ b/server/models/Project.ts	(date 1717203324160)
@@ -4,7 +4,7 @@
 import { Status } from "./Status";
 
 @Table
-export class Project extends BaseModel<Project> {
+export class Project extends BaseModel {
     
     @Column({
         type: DataType.STRING,
