Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"77e54277-4cd3-46a3-8865-e966fa0f589f\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/server/controllers/loginController.ts\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/server/controllers/refreshTokenController.ts\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/server/controllers/registrationController.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/controllers/authController.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/controllers/logoutController.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/models/BaseModel.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/models/BaseModel.ts\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/models/user.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/models/user.ts\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"TypeScript File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2hF0YrELF0RBzE6IvL7I4zPxlsH\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"master\",\n    \"last_opened_file_path\": \"/Users/gerard/Developer/jx-erta\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"settings.editor.selected.configurable\": \"project.propVCSSupport.DirectoryMappings\",\n    \"ts.external.directory.path\": \"/Users/gerard/Developer/jx-erta/client/node_modules/typescript/lib\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"start\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\n      <package-json value=\"$PROJECT_DIR$/server/package.json\" />\n      <command value=\"run\" />\n      <scripts>\n        <script value=\"start\" />\n      </scripts>\n      <node-interpreter value=\"project\" />\n      <envs />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"npm.start\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"77e54277-4cd3-46a3-8865-e966fa0f589f\" name=\"Changes\" comment=\"\" />\n      <created>1717174568222</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1717174568222</updated>\n      <workItem from=\"1717174569410\" duration=\"6844000\" />\n      <workItem from=\"1717191726524\" duration=\"4031000\" />\n      <workItem from=\"1717196087462\" duration=\"44000\" />\n      <workItem from=\"1717196139346\" duration=\"5408000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"HEAD\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <ignored-roots>\n      <path value=\"$PROJECT_DIR$/server\" />\n    </ignored-roots>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0aaf2841a80c7ff822f15f6b5bd14eb8ed2c58f3)
+++ b/.idea/workspace.xml	(date 1717217499787)
@@ -5,12 +5,29 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="77e54277-4cd3-46a3-8865-e966fa0f589f" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/changes_to_models.xml" afterDir="false" />
       <change afterPath="$PROJECT_DIR$/server/controllers/loginController.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server/controllers/logoutController.ts" afterDir="false" />
       <change afterPath="$PROJECT_DIR$/server/controllers/refreshTokenController.ts" afterDir="false" />
       <change afterPath="$PROJECT_DIR$/server/controllers/registrationController.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/controllers/authController.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/controllers/logoutController.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server/middleware/verifyRoles.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server/models/Role.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server/models/UserTasks.ts" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server/routes/authRoutes.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/.env" beforeDir="false" afterPath="$PROJECT_DIR$/server/.env" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/configs/database.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/configs/database.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/controllers/authController.ts" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/middleware/verifyJWT.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/middleware/verifyJWT.ts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/server/models/BaseModel.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/models/BaseModel.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/models/user.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/models/user.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/models/Department.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/models/Department.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/models/Priority.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/models/Priority.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/models/Project.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/models/Project.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/models/Status.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/models/Status.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/models/Task.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/models/Task.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/models/User.ts" beforeDir="false" afterPath="$PROJECT_DIR$/server/models/User.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/tsconfig.json" beforeDir="false" afterPath="$PROJECT_DIR$/server/tsconfig.json" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -62,7 +79,25 @@
       <recent name="$PROJECT_DIR$" />
     </key>
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Docker.docker-compose.localdev.yaml.server: Compose Deployment">
+    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
+      <deployment type="docker-compose.yml" />
+      <method v="2" />
+    </configuration>
+    <configuration name="docker-compose.localdev.yaml.server: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
+      <deployment type="docker-compose.yml">
+        <settings>
+          <option name="envFilePath" value="" />
+          <option name="services">
+            <list>
+              <option value="server" />
+            </list>
+          </option>
+          <option name="sourceFilePath" value="docker-compose.localdev.yaml" />
+        </settings>
+      </deployment>
+      <method v="2" />
+    </configuration>
     <configuration name="start" type="js.build_tools.npm" temporary="true" nameIsGenerated="true">
       <package-json value="$PROJECT_DIR$/server/package.json" />
       <command value="run" />
@@ -75,6 +110,7 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Docker.docker-compose.localdev.yaml.server: Compose Deployment" />
         <item itemvalue="npm.start" />
       </list>
     </recent_temporary>
@@ -90,8 +126,16 @@
       <workItem from="1717174569410" duration="6844000" />
       <workItem from="1717191726524" duration="4031000" />
       <workItem from="1717196087462" duration="44000" />
-      <workItem from="1717196139346" duration="5408000" />
+      <workItem from="1717196139346" duration="16055000" />
     </task>
+    <task id="LOCAL-00001" summary="changes to models">
+      <created>1717203525170</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1717203525170</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -124,5 +168,7 @@
     <ignored-roots>
       <path value="$PROJECT_DIR$/server" />
     </ignored-roots>
+    <MESSAGE value="changes to models" />
+    <option name="LAST_COMMIT_MESSAGE" value="changes to models" />
   </component>
 </project>
\ No newline at end of file
Index: server/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express, { Express } from \"express\";\nimport listEndpoints from \"express-list-endpoints\";\nimport cors from \"cors\";\nimport { testDbConnection } from \"./configs/database\";\n\nconst app: Express = express();\nconst port = process.env.PORT;\n\napp.use(cors());\n\napp.use(express.json());\n\napp.get('/', function(req, res){\n    res.send(\"We are online!\");\n})\n\n// app.use(\"/api/\", userRoutes)\n\nconsole.table(listEndpoints(app));\n\napp.listen(port, () => {\n    console.log(`[server]: Server is running at http://localhost:${port}`);\n    testDbConnection();\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/index.ts b/server/index.ts
--- a/server/index.ts	(revision 0aaf2841a80c7ff822f15f6b5bd14eb8ed2c58f3)
+++ b/server/index.ts	(date 1717217454896)
@@ -1,20 +1,28 @@
 import express, { Express } from "express";
 import listEndpoints from "express-list-endpoints";
 import cors from "cors";
+import cookieParser from 'cookie-parser';
 import { testDbConnection } from "./configs/database";
+import {authRoute} from "./routes/authRoutes";
 
 const app: Express = express();
 const port = process.env.PORT;
 
+app.use((req, res, next) => {
+    res.header('Access-Control-Allow-Credentials', 'true');
+    next();
+});
+
 app.use(cors());
-
+app.use(express.urlencoded({ extended: false }));
 app.use(express.json());
+app.use(cookieParser());
 
 app.get('/', function(req, res){
     res.send("We are online!");
 })
 
-// app.use("/api/", userRoutes)
+app.use('/auth', authRoute);
 
 console.table(listEndpoints(app));
 
Index: server/controllers/loginController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/loginController.ts b/server/controllers/loginController.ts
new file mode 100644
--- /dev/null	(date 1717216410069)
+++ b/server/controllers/loginController.ts	(date 1717216410069)
@@ -0,0 +1,58 @@
+import {User} from "../models/User";
+import bcrypt from 'bcrypt';
+import jwt from 'jsonwebtoken';
+import {Role} from "../models/Role";
+
+export const handleLogin = async (req, res) => {
+    const { email, password } = req.body;
+    if(!email || !password)
+        return res
+            .status(400)
+            .json({
+                status: res.statusCode,
+                message: 'Email and Password required'
+            })
+
+    const foundUser = await User.findOne(
+        ({
+            where: {
+                email: email
+            },
+            include: [Role],
+        })
+    );
+
+    if(!foundUser)
+        return res.sendStatus(401);
+
+    const match = bcrypt.compare(password, foundUser.passHash);
+
+    if(match) {
+        const accessToken = jwt.sign(
+            { 'UserInfo':
+                {
+                    'email': foundUser.email,
+                    'role': foundUser.role.name
+                }
+            },
+            process.env.ACCESS_TOKEN_SECRET,
+            { expiresIn: process.env.ACCESS_TOKEN_EXPIRATION }
+        );
+
+        const refreshToken = jwt.sign(
+            { 'email': foundUser.email },
+            process.env.REFRESH_TOKEN_SECRET,
+            { expiresIn: process.env.REFRESH_TOKEN_EXPIRATION }
+        );
+
+        foundUser.refreshToken = refreshToken;
+        await foundUser.save();
+
+        res.cookie('jwt', refreshToken, { httpOnly: true, sameSite: 'none', secure: true, maxAge: 24 * 60 * 60 * 1000});
+        res.json({
+            accessToken: accessToken
+        });
+    } else {
+        res.sendStatus(401);
+    }
+}
\ No newline at end of file
Index: server/controllers/refreshTokenController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/refreshTokenController.ts b/server/controllers/refreshTokenController.ts
new file mode 100644
--- /dev/null	(date 1717216410074)
+++ b/server/controllers/refreshTokenController.ts	(date 1717216410074)
@@ -0,0 +1,51 @@
+import {User} from "../models/User";
+import jwt from 'jsonwebtoken';
+import {Role} from "../models/Role";
+export const handleRefreshToken = async (req, res) => {
+    const cookies = req.cookies;
+
+    if(!cookies?.jwt)
+        return res.status(401)
+            .json({
+                status: res.statusCode,
+                message: 'Unauthorized'
+            });
+
+    const refreshToken = cookies.jwt;
+
+    const foundUser = await User.findOne(
+        ({
+            where: {
+                refreshToken: refreshToken
+            },
+            include: [Role],
+        })
+    );
+
+    if(!foundUser)
+        return res.sendStatus(401);
+
+    jwt.verify(
+        refreshToken,
+        process.env.REFRESH_TOKEN_SECRET,
+        (err, decoded) => {
+            if(err || foundUser.email !== decoded.email)
+                return res.sendStatus(403);
+
+            const accessToken = jwt.sign(
+                { 'UserInfo':
+                    {
+                        'email': decoded.email,
+                        'role': foundUser.role.name
+                    }
+                },
+                process.env.ACCESS_TOKEN_SECRET,
+                { expiresIn: process.env.ACCESS_TOKEN_EXPIRATION }
+            );
+
+            res.json(
+                { accessToken }
+            );
+        }
+    )
+}
\ No newline at end of file
Index: server/controllers/registrationController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/registrationController.ts b/server/controllers/registrationController.ts
new file mode 100644
--- /dev/null	(date 1717214846847)
+++ b/server/controllers/registrationController.ts	(date 1717214846847)
@@ -0,0 +1,54 @@
+import bcrypt from 'bcrypt';
+import {User} from "../models/User";
+
+interface RegistrationRequest {
+    email,
+    password,
+    fullName,
+    roleId,
+    dateOfBirth,
+    personalId,
+    address,
+    departmentId
+}
+
+export const handleRegistration = async (req, res) => {
+    const registrationRequest: RegistrationRequest = req.body;
+    if (!registrationRequest.email || !registrationRequest.password)
+        return res
+            .status(400)
+            .json({ 'message': 'Email and password are required.' });
+
+    const duplicate = await User.findOne(
+        ({
+            where: {
+                email: registrationRequest.email
+            }
+        })
+    );
+    if (duplicate)
+        return res
+            .status(409)
+            .json({
+                status: res.status,
+                message: 'User already exists'
+            });
+    try {
+        const hashedPwd = await bcrypt.hash(registrationRequest.password, 10);
+
+        const newUser = {
+            email: registrationRequest.email,
+            passHash: hashedPwd,
+            fullName: registrationRequest.fullName,
+            roleId: registrationRequest.roleId,
+            address: registrationRequest.address,
+            personalId: registrationRequest.personalId,
+            departmentId: registrationRequest.departmentId,
+            dateOfBirth: registrationRequest.dateOfBirth
+        };
+        const user = await User.create(newUser);
+        res.status(201).json({ 'success': `New user ${user} created!` });
+    } catch (err) {
+        res.status(500).json({ 'message': err });
+    }
+}
\ No newline at end of file
Index: server/middleware/verifyRoles.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/middleware/verifyRoles.ts b/server/middleware/verifyRoles.ts
new file mode 100644
--- /dev/null	(date 1717216410072)
+++ b/server/middleware/verifyRoles.ts	(date 1717216410072)
@@ -0,0 +1,11 @@
+export const verifyRoles = (...allowedRoles) => {
+    return (req, res, next) => {
+        if(!req?.role)
+            return res.sendStatus(401);
+        const result = allowedRoles.includes(req.role);
+        if(!result)
+            return res.sendStatus(401);
+
+        next();
+    }
+}
\ No newline at end of file
Index: server/routes/authRoutes.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/routes/authRoutes.ts b/server/routes/authRoutes.ts
new file mode 100644
--- /dev/null	(date 1717216986286)
+++ b/server/routes/authRoutes.ts	(date 1717216986286)
@@ -0,0 +1,19 @@
+import express from 'express';
+import {handleLogin} from "../controllers/loginController";
+import {handleRegistration} from "../controllers/registrationController";
+import {handleRefreshToken} from "../controllers/refreshTokenController";
+import {handleLogout} from "../controllers/logoutController";
+
+export const authRoute = express.Router();
+
+authRoute.route('/login')
+    .get(handleLogin);
+
+authRoute.route('/register')
+    .post(handleRegistration);
+
+authRoute.route('/refreshToken')
+    .get(handleRefreshToken);
+
+authRoute.route('/logout')
+    .get(handleLogout);
\ No newline at end of file
Index: server/middleware/verifyJWT.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/middleware/verifyJWT.ts b/server/middleware/verifyJWT.ts
--- a/server/middleware/verifyJWT.ts	(revision 0aaf2841a80c7ff822f15f6b5bd14eb8ed2c58f3)
+++ b/server/middleware/verifyJWT.ts	(date 1717216410077)
@@ -1,0 +1,21 @@
+import jwt from 'jsonwebtoken';
+
+export const verifyJWT = (req, res, next) => {
+    const authHeader = req.headers.authorization || req.headers.Authorization;
+    if(!authHeader?.startsWith('Bearer '))
+        return res.sendStatus(401);
+
+    const token = authHeader.split(' ')[1];
+
+    jwt.verify(
+        token,
+        process.env.ACCESS_TOKEN_SECRET,
+        (err, decoded) => {
+            if (err)
+                return res.sendStatus(403);
+            req.email = decoded.UserInfo.email;
+            req.role = decoded.UserInfo.role
+            next();
+        }
+    );
+}
\ No newline at end of file
Index: server/controllers/logoutController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/controllers/logoutController.ts b/server/controllers/logoutController.ts
new file mode 100644
--- /dev/null	(date 1717216710883)
+++ b/server/controllers/logoutController.ts	(date 1717216710883)
@@ -0,0 +1,28 @@
+import {User} from "../models/User";
+
+export const handleLogout = async (req, res) => {
+    const cookies = req.cookies;
+    if (!cookies?.jwt)
+        return res.sendStatus(204);
+
+    const refreshToken = cookies.jwt;
+
+    const foundUser = await User.findOne(
+        ({
+            where: {
+                refreshToken: refreshToken
+            }
+        })
+    );
+
+    if (!foundUser) {
+        res.clearCookie('jwt', {httpOnly: true});
+        return res.sendStatus(204)
+    }
+
+    foundUser.refreshToken = null;
+    await foundUser.save();
+
+    res.clearCookie('jwt', { httpOnly: true, sameSite: 'none', secure: true }); // secure: true
+    res.sendStatus(204);
+}
\ No newline at end of file
Index: .idea/shelf/changes_to_models.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/changes_to_models.xml b/.idea/shelf/changes_to_models.xml
new file mode 100644
--- /dev/null	(date 1717203667423)
+++ b/.idea/shelf/changes_to_models.xml	(date 1717203667423)
@@ -0,0 +1,4 @@
+<changelist name="changes_to_models" date="1717203524951" recycled="false">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/changes_to_models/shelved.patch" />
+  <option name="DESCRIPTION" value="changes to models" />
+</changelist>
\ No newline at end of file
Index: server/.env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Database Data\nDB_HOST=\"database\"\nDB_DATABASE=\"jx-erta\"\nDB_USERNAME=\"admin\"\nDB_PASSWORD=\"1234\"\nDB_DIALECT=\"postgres\"\n\n# Backend Data\nAUTH_SECRET=\"your-secret-key\"\nAUTH_EXPIRES_IN=\"1h\"\nAUTH_REFRESH_EXPIRES_IN=\"7d\"\nPORT=\"4000\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/.env b/server/.env
--- a/server/.env	(revision 0aaf2841a80c7ff822f15f6b5bd14eb8ed2c58f3)
+++ b/server/.env	(date 1717205619955)
@@ -6,7 +6,10 @@
 DB_DIALECT="postgres"
 
 # Backend Data
-AUTH_SECRET="your-secret-key"
-AUTH_EXPIRES_IN="1h"
-AUTH_REFRESH_EXPIRES_IN="7d"
 PORT="4000"
+
+#TOKEN DATA
+ACCESS_TOKEN_SECRET="ad07b1e9c1db53a0600d0ab54c1978ead3e3f23985068fd9c31a1763b209eb3e9c316201345d7718bc8a84cd74c8db854f695319686df660e821d606ca87aebd"
+REFRESH_TOKEN_SECRET="9e930fe99dddf348ddc46447647a9c77c166819d36c47472bb67e25da8b27b687ecd0f73927f81713ae36e37ae27aea37fe2ffca19d9507b2fa9e1ccb8c4a838"
+ACCESS_TOKEN_EXPIRATION="1h"
+REFRESH_TOKEN_EXPIRATION="7d"
diff --git a/server/controllers/authController.ts b/server/controllers/authController.ts
deleted file mode 100644
